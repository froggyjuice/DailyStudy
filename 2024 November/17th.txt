# 입력데이터
lines = []
for _ in range(5):
    line = input()
    lines.append(line)

# 최대 길이 계산
max_length = max(len(line) for line in lines)

# 2차원 리스트로 변환 (빈 문자는 " " 으로 채움 -- ljust(max_length))
grid = []
for line in lines:
    grid.append(list(line.ljust(max_length, " ")))

# 결과를 저장할 리스트
result = []

# 세로로 읽기
for col in range(max_length):
    for row in range(len(grid)):
        if grid[row][col] != " ":
            result.append(grid[row][col])

print("".join(result))

# 100x100 크기의 도화지
canvas = [[0 for _ in range(100)] for _ in range(100)]

# 예: (3, 7) 위치에 색종이를 붙인 경우
# 색종이는 10x10 크기이므로 (3, 7)부터 (12, 16)까지 덮입니다.
for i in range(3, 13):  # 세로 범위
    for j in range(7, 17):  # 가로 범위
        canvas[i][j] = 1  # 색종이가 붙은 영역을 1로 표시

# 도화지 출력 (테스트용으로 작은 도화지로 확인)
for row in canvas[:20]:  # 처음 20줄만 출력
    print(row[:20])  # 처음 20칸만 출력

import numpy as np

# 100x100 크기의 도화지 생성 (초기값 0)
canvas = np.zeros((100, 100), dtype=int)

# 예: (3, 7) 위치에 색종이를 붙인 경우
# 색종이는 10x10 크기이므로 (3, 7)부터 (12, 16)까지 덮습니다.
x, y = 3, 7  # 색종이의 왼쪽 아래 좌표
canvas[x:x+10, y:y+10] = 1  # 해당 영역을 1로 설정

# 도화지 출력 (테스트용으로 작은 영역 출력)
print(canvas[:20, :20])  # 처음 20x20 영역만 출력

# 2차원 배열로 초기화
canvas = [[0] * 100 for _ in range(100)]
print(canvas[:20,:20])

# 색종이 붙이기
N = int(input())
for _ in range(N):
    x, y = map(int, input().split())
    for i in range(x, min(x + 10, 100)):
        for j in range(y, min(y + 10, 100)):
            canvas[i][j] = 1

# 검은 영역의 합
black_area = sum(sum(row) for row in canvas)
print(black_area)

def josephus(n, k):
    people = list(range(1, n + 1))  # 1번부터 n번까지 사람
    result = []
    idx = 0  # 시작 인덱스

    while people:
        idx = (idx + k -1) % len(people)  # k번째 사람의 인덱스
        result.append(people.pop(idx))  # 해당 사람 제거하고 결과에 추가

    return result

# 예제: 7명 중 3번째 사람을 계속 제거
n, k = map(int, input().split())
print("<" + ", ".join(map(str, josephus(n, k))) + ">")

matrix = []

for _ in range(9):
    row = list(map(int, input().split()))
    matrix.append(row)

maximum = matrix[0][0]
max_row, max_col = 1, 1

for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        if matrix[i][j] > maximum:
            maximum = matrix[i][j]
            max_row, max_col = i + 1, j +1

print(maximum)
print(max_row, max_col)

text = "abc(def)ghi"

# 인덱스를 이용하여 문자열 순회
index = 0
length = len(text)
in_brackets = False  # 괄호 내부에 있는지 여부를 추적

while index < length:
    char = text[index]
    
    if char == "(":
        print("여는 괄호 '(' 발견, 반복을 중지합니다.")
        in_brackets = True
        index += 1
        continue  # 괄호가 열릴 때 반복을 빠져나감
    
    if char == ")" and in_brackets:
        print("닫는 괄호 ')' 발견, 반복을 다시 시작합니다.")
        in_brackets = False
        index += 1
        continue  # 괄호가 닫힐 때 반복 재개
    
    if not in_brackets:
        print(f"현재 글자: {char}")
    
    index += 1

text = input()
index = 0
length = len(text)
in_brackets = False  # 괄호 내부 상태 추적
left = False  # 'abc' 처리 상태
right = False  # 'ghi' 처리 상태
count_left = 0
count_right = 0

while index < length:
    char = text[index]
    
    if char == "(":
        in_brackets = True
        index += 1
        continue

    if char == ")":
        in_brackets = False
        left = True  # 괄호 이전 내용 처리 완료로 표시
        index += 1
        continue

    if not in_brackets and not left:
        # 괄호 이전의 글자 처리 
        if char == "@":
            count_left += 1
    
    elif not in_brackets and left and not right:
        # 괄호 이후의 글자 처리 
        if char == "@":
            count_right += 1
        if index == length - 1:  # 마지막 글자 처리 시 상태 변경
            right = True

    index += 1

print(count_left, count_right)

text = input()
in_brackets = False
left_complete = False  # 괄호 이전 처리 완료 상태
count_left = 0
count_right = 0

for char in text:
    if char == "(":
        in_brackets = True
    elif char == ")":
        in_brackets = False
        left_complete = True
    elif not in_brackets and not left_complete:
        if char == "@":
            count_left += 1
    elif not in_brackets and left_complete:
        if char == "@":
            count_right += 1

print(count_left, count_right)
